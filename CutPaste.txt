 // variable for our array list and context
        private ArrayList<EventModel> eventModalArrayList;
        private Context context;

        // constructor
        public EventAdapter(ArrayList<EventModel> eventModalArrayList, Context context) {
            this.eventModalArrayList = eventModalArrayList;
            this.context = context;
        }

        @NonNull
        @Override
        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            // on below line we are inflating our layout
            // file for our recycler view items.
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.activity_view_events, parent, false);
            return new ViewHolder(view);
        }

        @Override
        public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
            // on below line we are setting data
            // to our views of recycler view item.
            EventModel modal = eventModalArrayList.get(position);
            holder.eventName.setText(modal.getEventName());
            holder.eventDesc.setText(modal.getCEventDescription());
            holder.eventLocation.setText(modal.getEventLocation());
            holder.eventTimeS.setText(modal.getStartTime());
            holder.eventTimeE.setText(modal.getFinishTime());
        }

        @Override
        public int getItemCount() {
            // returning the size of our array list
            return eventModalArrayList.size();
        }

        public class ViewHolder extends RecyclerView.ViewHolder {

            // creating variables for our text views.
            private TextView eventName, eventDesc, eventLocation, eventTimeS, eventTimeE;

            public ViewHolder(@NonNull View itemView) {
                super(itemView);
                // initializing our text views
                eventName = itemView.findViewById(R.id.eName);
                eventDesc = itemView.findViewById(R.id.eDesc);
                eventLocation = itemView.findViewById(R.id.eLocation);
                eventTimeS = itemView.findViewById(R.id.sTime);
                eventTimeE = itemView.findViewById(R.id.sTime);
            }
        }










//view event
<!--text view for our event name-->
        <TextView
            android:id="@+id/eName"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="3dp"
            android:text="Event Name"
            android:textColor="@color/black" />

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:weightSum="2">

            <!--text view for our event location-->
            <TextView
                android:id="@+id/eLocation"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:padding="3dp"
                android:text="Event Location"
                android:textColor="@color/black" />


            <!--text view for our start time-->
            <TextView
                android:id="@+id/sTime"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:padding="3dp"
                android:text="Time"
                android:textColor="@color/black" />

        </LinearLayout>

        <!--text view for our event description-->
        <TextView
            android:id="@+id/eDesc"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:padding="3dp"
            android:text="Event Description"
            android:textColor="@color/black" />